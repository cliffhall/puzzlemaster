generator client {
  provider        = "prisma-client-js"
  output          = "generated"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "darwin-arm64"]
}

datasource db {
  provider = "sqlite"
  url      = "file:database/puzzlemaster.db"
}

// --- Domain Models ---

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  plan Plan?
}

model Plan {
  id          String   @id @default(uuid())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @unique

  phases Phase[]
}

model Phase {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId String

  team Team? // One-to-one with Team, linked from Team.phaseId
  job  Job? // One-to-one with Job, linked from Job.phaseId

  // Corresponds to the `actions` array in Phase.ts.
  // Represents all Actions that originate from this Phase.
  actions           Action[] @relation("SourcePhaseActions")
  // Back-relation for Action.targetPhaseId.
  // Represents all Actions that target this Phase.
  targetedByActions Action[] @relation("TargetPhaseActions")
}

model Job {
  id          String    @id @default(uuid())
  name        String
  description String?
  status      JobStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  phase   Phase  @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  phaseId String @unique

  tasks Task[]
}

model Task {
  id          String     @id @default(uuid())
  name        String
  description String?
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId String

  agent   Agent  @relation(fields: [agentId], references: [id])
  agentId String

  validator   Validator @relation(fields: [validatorId], references: [id])
  validatorId String
}

model Action {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key for the Phase that "owns" this action, based on `Phase.actions`.
  phaseId String
  phase   Phase  @relation("SourcePhaseActions", fields: [phaseId], references: [id], onDelete: Cascade)

  // Foreign key for the Phase this action targets, from `Action.targetPhaseId`.
  targetPhaseId String
  targetPhase   Phase  @relation("TargetPhaseActions", fields: [targetPhaseId], references: [id])

  // Foreign key for the Validator, from `Action.validatorId`.
  validatorId String
  validator   Validator @relation(fields: [validatorId], references: [id])
}

model Team {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phase   Phase  @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  phaseId String @unique

  agents Agent[]
}

model Agent {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  tasks Task[]
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  agents Agent[]
}

model Validator {
  id        String   @id @default(uuid())
  template  String
  resource  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks   Task[]
  actions Action[]
}

// Enums for status fields
enum TaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
